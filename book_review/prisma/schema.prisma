generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  role      Role      @default(USER)
  email     String    @unique
  name      String?
  image     String? 
  emailVerified DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  hash      String?
  hashedRt  String?
  suspended Boolean   @default(false)
  accounts  Account[]
  reports   Report[]
  reviews   Review[]
  sessions  Session[]
}

model Book {
  id            String     @id @default(cuid())
  title         String
  description   String
  author        String
  image         String
  publishedDate DateTime
  views         Int        @default(0)
  reviews       Review[]
  categories    Category[] @relation("CategoryBooks")
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int      @default(1)
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[] @relation("CategoryBooks")
}

model Report {
  id          String       @id @default(cuid())
  userId      String
  reviewId    String
  reason      String
  createdAt   DateTime     @default(now())
  actionTaken String?
  status      ReportStatus @default(PENDING)
  review      Review       @relation(fields: [reviewId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  REMOVED
}
