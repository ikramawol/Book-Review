// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id        String   @id @default(cuid())
  role      Role     @default(USER)
  email     String   @unique
  name      String?
  hash      String
  hashedRt  String?
  reviews   Review[]
  accounts  Account[] 
  sessions  Session[]
  reports   Report[]
  isDeleted Boolean @default(false)
  suspended Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book{
  id        String   @id @default(cuid())
  title     String
  description String
  author    String
  image     String
  views     Int @default(0)
  publishedDate DateTime
  reviews   Review[]
  categories Category[] @relation("CategoryBooks")
}

model Review{
  id        String   @id @default(cuid())
  content   String
  rating    Int @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reports   Report[]
}

model Category{
  id Int @id @default(autoincrement())
  name String
  books Book[] @relation("CategoryBooks")

}
enum Role {
  USER
  ADMIN
}

model Report {
  id           String   @id @default(cuid())
  reason       String
  status       ReportStatus @default(PENDING)
  actionTaken  String?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  review       Review   @relation(fields: [reviewId], references: [id])
  reviewId     String
  createdAt    DateTime @default(now())
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
  REMOVED
}

model Account {
  id                 String @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
